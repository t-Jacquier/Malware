#include "out.h"



uint __cdecl FUN_00401000(int param_1)

{
  uint uVar1;
  undefined4 local_24;
  undefined4 local_20;
  undefined4 local_1c;
  undefined local_18;
  undefined4 local_17;
  undefined4 local_13;
  undefined4 local_f;
  undefined4 local_b;
  undefined2 local_7;
  undefined local_5;
  
  local_18 = 0x31;
  uVar1 = 0;
  local_24 = 0x61656462;
  local_20 = 0x31643336;
  local_1c = 0x30376263;
  local_17 = 0x38663438;
  local_13 = 0x64396434;
  local_f = 0x35383530;
  local_b = 0x37633863;
  local_7 = 0x3965;
  local_5 = 0x36;
  do {
    if (((char *)((int)&local_24 + uVar1))[param_1 - (int)&local_24] !=
        *(char *)((int)&local_24 + uVar1)) {
      return uVar1 & 0xffffff00;
    }
    uVar1 = uVar1 + 1;
  } while ((int)uVar1 < 0x20);
  return CONCAT31((int3)(uVar1 >> 8),1);
}


// Fonction principale
undefined4 __cdecl FUN_00401080(int param_1,int param_2)

{
  int iVar1;
  uint uVar2;
  byte *pbVar3;
  uint *extraout_ECX;
  uint *extraout_ECX_00;
  uint *extraout_ECX_01;
  byte *extraout_EDX;
  byte *extraout_EDX_00;
  byte *extraout_EDX_01;
  
  if (param_1 < 2) {
    return 0;
  }
  printf("%s\n",*(undefined4 *)(param_2 + 4));
  if (*(char *)((int)ProcessEnvironmentBlock + 2) != '\0') {
    iVar1 = 0;
    do {
      (&DAT_004030c8)[iVar1] = (&DAT_004030c8)[iVar1] ^ (&DAT_0040323c)[iVar1];
      (&DAT_004030c9)[iVar1] = (&DAT_004030c9)[iVar1] ^ (&DAT_0040323d)[iVar1];
      (&DAT_004030ca)[iVar1] = (&DAT_004030ca)[iVar1] ^ (&DAT_0040323e)[iVar1];
      (&DAT_004030cb)[iVar1] = (&DAT_004030cb)[iVar1] ^ (&DAT_0040323f)[iVar1];
      iVar1 = iVar1 + 4;
    } while (iVar1 < 0x20);
    DAT_004030e8 = 0;
    (*(code *)0x78b027ba)(&DAT_004030c8);
    return 1;
  }
  uVar2 = FUN_00401000(*(int *)(param_2 + 4));
  printf("",uVar2 & 0xff);
  FUN_00403110(0x403170,0x5f,0x4031f4);
  FUN_00403170(extraout_ECX,extraout_EDX);
  FUN_00403170((uint *)FUN_00403170,extraout_EDX_00);
  FUN_00403170(extraout_ECX_00,(byte *)FUN_00403170);
  FUN_00403170(extraout_ECX_01,extraout_EDX_01);
  DAT_004030e8 = 0;
  pbVar3 = FUN_00403020(*(uint *)(param_2 + 4),FUN_00403020);
  if ((char)pbVar3 == '\0') {
    (*(code *)0x78b0032b)(&DAT_004030ec);
    return 1;
  }
  printf("%s",&DAT_004030a8);
  do {
                    // WARNING: Do nothing block with infinite loop
  } while( true );
}



// WARNING: Function: __SEH_prolog4 replaced with injection: SEH_prolog4
// WARNING: Function: __SEH_epilog4 replaced with injection: EH_epilog3
// Library Function - Single Match
//  ___tmainCRTStartup
// 
// Library: Visual Studio 2010 Release

int ___tmainCRTStartup(void)

{
  bool bVar1;
  void *Exchange;
  void *pvVar2;
  int iVar3;
  BOOL BVar4;
  
  if (DAT_004035f0 == 0) {
    HeapSetInformation((HANDLE)0x0,HeapEnableTerminationOnCorruption,(PVOID)0x0,0);
  }
  Exchange = StackBase;
  bVar1 = false;
  do {
    pvVar2 = (void *)InterlockedCompareExchange((LONG *)&DAT_004035e4,(LONG)Exchange,0);
    if (pvVar2 == (void *)0x0) {
LAB_0040127f:
      if (DAT_004035e0 == 1) {
        _amsg_exit(0x1f);
      }
      else if (DAT_004035e0 == 0) {
        DAT_004035e0 = 1;
        iVar3 = _initterm_e(&DAT_004020b4,&DAT_004020c0);
        if (iVar3 != 0) {
          return 0xff;
        }
      }
      else {
        DAT_004032a4 = 1;
      }
      if (DAT_004035e0 == 1) {
        _initterm(&DAT_004020a8,&DAT_004020b0);
        DAT_004035e0 = 2;
      }
      if (!bVar1) {
        InterlockedExchange((LONG *)&DAT_004035e4,0);
      }
      if ((DAT_004035f4 != (code *)0x0) &&
         (BVar4 = __IsNonwritableInCurrentImage((PBYTE)&DAT_004035f4), BVar4 != 0)) {
        (*DAT_004035f4)(0,2,0);
      }
      *(undefined4 *)__initenv_exref = DAT_0040328c;
      DAT_004032a0 = FUN_00401080(DAT_00403288,DAT_00403290);
      if (DAT_00403294 != 0) {
        if (DAT_004032a4 == 0) {
          _cexit();
        }
        return DAT_004032a0;
      }
                    // WARNING: Subroutine does not return
      exit(DAT_004032a0);
    }
    if (pvVar2 == Exchange) {
      bVar1 = true;
      goto LAB_0040127f;
    }
    Sleep(1000);
  } while( true );
}



void entry(void)

{
  ___security_init_cookie();
  ___tmainCRTStartup();
  return;
}



// Library Function - Single Match
//  long __stdcall __CxxUnhandledExceptionFilter(struct _EXCEPTION_POINTERS *)
// 
// Libraries: Visual Studio 2008 Release, Visual Studio 2010 Release

long __CxxUnhandledExceptionFilter(_EXCEPTION_POINTERS *param_1)

{
  PEXCEPTION_RECORD pEVar1;
  ULONG_PTR UVar2;
  
  pEVar1 = param_1->ExceptionRecord;
  if (((pEVar1->ExceptionCode == 0xe06d7363) && (pEVar1->NumberParameters == 3)) &&
     ((UVar2 = pEVar1->ExceptionInformation[0], UVar2 == 0x19930520 ||
      (((UVar2 == 0x19930521 || (UVar2 == 0x19930522)) || (UVar2 == 0x1994000)))))) {
    terminate();
  }
  return 0;
}



void __cdecl _amsg_exit(int param_1)

{
                    // WARNING: Could not recover jumptable at 0x004014be. Too many branches
                    // WARNING: Treating indirect jump as call
  _amsg_exit(param_1);
  return;
}



// WARNING: Function: __SEH_prolog4 replaced with injection: SEH_prolog4
// WARNING: Function: __SEH_epilog4 replaced with injection: EH_epilog3
// Library Function - Single Match
//  __onexit
// 
// Library: Visual Studio 2010 Release

_onexit_t __cdecl __onexit(_onexit_t param_1)

{
  _onexit_t p_Var1;
  PVOID pvVar2;
  PVOID *ppvVar3;
  PVOID *ppvVar4;
  PVOID local_24;
  PVOID local_20 [5];
  undefined4 uStack_c;
  undefined *local_8;
  
  local_8 = &DAT_00402208;
  uStack_c = 0x4014d0;
  local_20[0] = DecodePointer(DAT_004035ec);
  if (local_20[0] == (PVOID)0xffffffff) {
    p_Var1 = _onexit(param_1);
  }
  else {
    _lock(8);
    local_8 = (undefined *)0x0;
    local_20[0] = DecodePointer(DAT_004035ec);
    local_24 = DecodePointer(DAT_004035e8);
    ppvVar4 = &local_24;
    ppvVar3 = local_20;
    pvVar2 = EncodePointer(param_1);
    p_Var1 = (_onexit_t)__dllonexit(pvVar2,ppvVar3,ppvVar4);
    DAT_004035ec = EncodePointer(local_20[0]);
    DAT_004035e8 = EncodePointer(local_24);
    local_8 = (undefined *)0xfffffffe;
    FUN_0040155c();
  }
  return p_Var1;
}



void FUN_0040155c(void)

{
  _unlock(8);
  return;
}



// Library Function - Single Match
//  _atexit
// 
// Library: Visual Studio 2010 Release

int __cdecl _atexit(_func_4879 *param_1)

{
  _onexit_t p_Var1;
  
  p_Var1 = __onexit((_onexit_t)param_1);
  return (p_Var1 != (_onexit_t)0x0) - 1;
}



// WARNING: Removing unreachable block (ram,0x00401590)
// WARNING: Removing unreachable block (ram,0x00401596)
// WARNING: Removing unreachable block (ram,0x00401598)

void FUN_0040157c(void)

{
  return;
}



void FUN_004015c8(void)

{
                    // WARNING: Treating indirect jump as call
  (*(code *)0x2370)();
  return;
}



// Library Function - Single Match
//  __ValidateImageBase
// 
// Libraries: Visual Studio 2008 Release, Visual Studio 2010 Release

BOOL __cdecl __ValidateImageBase(PBYTE pImageBase)

{
  if ((*(short *)pImageBase == 0x5a4d) &&
     (*(int *)(pImageBase + *(int *)(pImageBase + 0x3c)) == 0x4550)) {
    return (uint)(*(short *)((int)(pImageBase + *(int *)(pImageBase + 0x3c)) + 0x18) == 0x10b);
  }
  return 0;
}



// Library Function - Single Match
//  __FindPESection
// 
// Library: Visual Studio 2010 Release

PIMAGE_SECTION_HEADER __cdecl __FindPESection(PBYTE pImageBase,DWORD_PTR rva)

{
  int iVar1;
  PIMAGE_SECTION_HEADER p_Var2;
  uint uVar3;
  
  iVar1 = *(int *)(pImageBase + 0x3c);
  uVar3 = 0;
  p_Var2 = (PIMAGE_SECTION_HEADER)
           (pImageBase + *(ushort *)(pImageBase + iVar1 + 0x14) + 0x18 + iVar1);
  if (*(ushort *)(pImageBase + iVar1 + 6) != 0) {
    do {
      if ((p_Var2->VirtualAddress <= rva) &&
         (rva < (p_Var2->Misc).PhysicalAddress + p_Var2->VirtualAddress)) {
        return p_Var2;
      }
      uVar3 = uVar3 + 1;
      p_Var2 = p_Var2 + 1;
    } while (uVar3 < *(ushort *)(pImageBase + iVar1 + 6));
  }
  return (PIMAGE_SECTION_HEADER)0x0;
}



// Library Function - Single Match
//  __IsNonwritableInCurrentImage
// 
// Library: Visual Studio 2010 Release

BOOL __cdecl __IsNonwritableInCurrentImage(PBYTE pTarget)

{
  BOOL BVar1;
  PIMAGE_SECTION_HEADER p_Var2;
  void *local_14;
  code *pcStack_10;
  uint local_c;
  undefined4 local_8;
  
  pcStack_10 = FUN_00401789;
  local_14 = ExceptionList;
  local_c = DAT_00403018 ^ 0x402228;
  ExceptionList = &local_14;
  local_8 = 0;
  BVar1 = __ValidateImageBase((PBYTE)&IMAGE_DOS_HEADER_00400000);
  if (BVar1 != 0) {
    p_Var2 = __FindPESection((PBYTE)&IMAGE_DOS_HEADER_00400000,(DWORD_PTR)(pTarget + -0x400000));
    if (p_Var2 != (PIMAGE_SECTION_HEADER)0x0) {
      ExceptionList = local_14;
      return ~(p_Var2->Characteristics >> 0x1f) & 1;
    }
  }
  ExceptionList = local_14;
  return 0;
}



void _initterm(void)

{
                    // WARNING: Could not recover jumptable at 0x0040171c. Too many branches
                    // WARNING: Treating indirect jump as call
  _initterm();
  return;
}



void _initterm_e(void)

{
                    // WARNING: Could not recover jumptable at 0x00401722. Too many branches
                    // WARNING: Treating indirect jump as call
  _initterm_e();
  return;
}



// WARNING: This is an inlined function
// WARNING: Unable to track spacebase fully for stack
// WARNING: Variable defined which should be unmapped: param_2
// Library Function - Single Match
//  __SEH_prolog4
// 
// Library: Visual Studio

void __cdecl __SEH_prolog4(undefined4 param_1,int param_2)

{
  int iVar1;
  undefined4 unaff_EBX;
  undefined4 unaff_ESI;
  undefined4 unaff_EDI;
  undefined4 unaff_retaddr;
  uint auStack_1c [5];
  undefined local_8 [8];
  
  iVar1 = -param_2;
  *(undefined4 *)((int)auStack_1c + iVar1 + 0x10) = unaff_EBX;
  *(undefined4 *)((int)auStack_1c + iVar1 + 0xc) = unaff_ESI;
  *(undefined4 *)((int)auStack_1c + iVar1 + 8) = unaff_EDI;
  *(uint *)((int)auStack_1c + iVar1 + 4) = DAT_00403018 ^ (uint)&param_2;
  *(undefined4 *)((int)auStack_1c + iVar1) = unaff_retaddr;
  ExceptionList = local_8;
  return;
}



// WARNING: This is an inlined function
// Library Function - Single Match
//  __SEH_epilog4
// 
// Library: Visual Studio

void __SEH_epilog4(void)

{
  undefined4 *unaff_EBP;
  undefined4 unaff_retaddr;
  
  ExceptionList = (void *)unaff_EBP[-4];
  *unaff_EBP = unaff_retaddr;
  return;
}



void __cdecl
FUN_00401789(undefined4 param_1,undefined4 param_2,undefined4 param_3,undefined4 param_4)

{
  _except_handler4_common(&DAT_00403018,&LAB_0040188c,param_1,param_2,param_3,param_4);
  return;
}



void FUN_004017ae(void)

{
  errno_t eVar1;
  
  eVar1 = _controlfp_s((uint *)0x0,0x10000,0x30000);
  if (eVar1 != 0) {
                    // WARNING: Subroutine does not return
    _invoke_watson((wchar_t *)0x0,(wchar_t *)0x0,(wchar_t *)0x0,0,0);
  }
  return;
}



undefined4 FUN_004017d6(void)

{
  return 0;
}



// Library Function - Single Match
//  ___security_init_cookie
// 
// Library: Visual Studio 2010 Release

void __cdecl ___security_init_cookie(void)

{
  DWORD DVar1;
  DWORD DVar2;
  DWORD DVar3;
  uint uVar4;
  LARGE_INTEGER local_14;
  _FILETIME local_c;
  
  local_c.dwLowDateTime = 0;
  local_c.dwHighDateTime = 0;
  if ((DAT_00403018 == 0xbb40e64e) || ((DAT_00403018 & 0xffff0000) == 0)) {
    GetSystemTimeAsFileTime(&local_c);
    uVar4 = local_c.dwHighDateTime ^ local_c.dwLowDateTime;
    DVar1 = GetCurrentProcessId();
    DVar2 = GetCurrentThreadId();
    DVar3 = GetTickCount();
    QueryPerformanceCounter(&local_14);
    DAT_00403018 = uVar4 ^ DVar1 ^ DVar2 ^ DVar3 ^ local_14.s.HighPart ^ local_14.s.LowPart;
    if (DAT_00403018 == 0xbb40e64e) {
      DAT_00403018 = 0xbb40e64f;
    }
    else if ((DAT_00403018 & 0xffff0000) == 0) {
      DAT_00403018 = DAT_00403018 | (DAT_00403018 | 0x4711) << 0x10;
    }
    DAT_0040301c = ~DAT_00403018;
  }
  else {
    DAT_0040301c = ~DAT_00403018;
  }
  return;
}



void __cdecl terminate(void)

{
                    // WARNING: Could not recover jumptable at 0x00401874. Too many branches
                    // WARNING: Treating indirect jump as call
  terminate();
  return;
}



void __cdecl _unlock(int _File)

{
                    // WARNING: Could not recover jumptable at 0x0040187a. Too many branches
                    // WARNING: Treating indirect jump as call
  _unlock(_File);
  return;
}



void __dllonexit(void)

{
                    // WARNING: Could not recover jumptable at 0x00401880. Too many branches
                    // WARNING: Treating indirect jump as call
  __dllonexit();
  return;
}



void __cdecl _lock(int _File)

{
                    // WARNING: Could not recover jumptable at 0x00401886. Too many branches
                    // WARNING: Treating indirect jump as call
  _lock(_File);
  return;
}



void _except_handler4_common(void)

{
                    // WARNING: Could not recover jumptable at 0x0040189c. Too many branches
                    // WARNING: Treating indirect jump as call
  _except_handler4_common();
  return;
}



void __cdecl
_invoke_watson(wchar_t *param_1,wchar_t *param_2,wchar_t *param_3,uint param_4,uintptr_t param_5)

{
                    // WARNING: Could not recover jumptable at 0x004018a2. Too many branches
                    // WARNING: Subroutine does not return
                    // WARNING: Treating indirect jump as call
  _invoke_watson(param_1,param_2,param_3,param_4,param_5);
  return;
}



errno_t __cdecl _controlfp_s(uint *_CurrentState,uint _NewValue,uint _Mask)

{
  errno_t eVar1;
  
                    // WARNING: Could not recover jumptable at 0x004018a8. Too many branches
                    // WARNING: Treating indirect jump as call
  eVar1 = _controlfp_s(_CurrentState,_NewValue,_Mask);
  return eVar1;
}



void __cdecl _crt_debugger_hook(int param_1)

{
                    // WARNING: Could not recover jumptable at 0x004019b4. Too many branches
                    // WARNING: Treating indirect jump as call
  _crt_debugger_hook(param_1);
  return;
}



